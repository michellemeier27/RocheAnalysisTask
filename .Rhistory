genes_1 <- rownames(t)[t == 1 | t == -1] #get genenames
gs <- GeneSet(geneIds = genes_1, organism = 'Homo Sapiens',  geneIdType= SymbolIdentifier())
output<-teEnrichment(inputGenes = gs)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
head(enrichmentOutput)
head(enrichmentOutput)
ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(P-Adjusted)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
View(ge)
View(ge@result)
emapplot(ge )
emapplot(pairwise_termsim(ge))
t <- decideTests(et, lfc = 1.5) #filter
rownames(t) = et$genes$gene_name
genes_1 <- rownames(t)[t == 1 | t == -1] #get genenames
gs <- GeneSet(geneIds = genes_1, organism = 'Homo Sapiens',  geneIdType= SymbolIdentifier())
output<-teEnrichment(inputGenes = gs)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
head(enrichmentOutput)
ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(P-Adjusted)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
enrichDGN
edo <- enrichDGN(TopHits100Pval$table$Entrez)
barplot(edo, showCategory=20)
dotplot(en, showCategory=15)
dotplot(edo, showCategory=15)
?enrichDGN
edo2 <- gseNCG(genelist, nPerm=10000)
genelist
edo2 <- gseNCG(genelist)
genelist = -log10(et$table$PValue)
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
edo2 <- gseNCG(genelist)
genelist = -log10(et$table$PValue)
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(geneList,  eps = 0)
ge = gsePathway(genelist,  eps = 0)
dotplot(ge, showCategory=20)
genelist = -log10(et$table$PValue)*et$table$logFC
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
dotplot(ge, showCategory=20)
cnetplot(ge, node_label="category")
install.packages(ggnewscale)
install.packages('ggnewscale')
library('ggnewscale')
cnetplot(ge, node_label="category")
emapplot(pairwise_termsim(ge))
barplot(ge, showCategory=8)
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
emapplot(pairwise_termsim(ge))
p1 <- cnetplot(ge, node_label="category")
p2 <- cnetplot(ge, node_label="gene")
p3 <- cnetplot(ge, node_label="all")
p4 <- cnetplot(ge, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
cnetplot(ge, node_label="category")
p1 <- heatplot(edox)
p2 <- heatplot(edox, foldChange=geneList)
cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
edox <- setReadable(ge, 'org.Hs.eg.db', 'ENTREZID')
View(ge)
library(clusterProfiler)
library(clusterProfiler)
data("gcSample")
View(gcSample)
upsetplot(ge)
install.packages('ggupset')
library('ggupset')
upsetplot(ge)
gseaplot2(ge, geneSetID = 1)
ge
View(ge@result)
viewPathway('Interleukin-4 and Interleukin-13 signaling', readable = T, foldChange = genelist)
viewPathway('Signaling by Interleukins', readable = T, foldChange = genelist)
cnetplot(ge, node_label="category")
upsetplot(ge)
genelist = -log10(et$table$PValue)
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
dotplot(ge, showCategory=20)
cnetplot(ge, node_label="category")
t <- decideTests(et, lfc = 1.5) #filter
rownames(t) = et$genes$gene_name
genes_1 <- rownames(t)[t == 1 | t == -1] #get genenames
gs <- GeneSet(geneIds = genes_1, organism = 'Homo Sapiens',  geneIdType= SymbolIdentifier())
output<-teEnrichment(inputGenes = gs)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
head(enrichmentOutput)
ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(P-Adjusted)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(P-Adjusted)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
p <- p + ggtitle('Tissue Enrichment of significant DE (|log2FC| > 1.5')
p
?ggtitle
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-LOG10(P-Adjusted)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
p <- p + ggtitle('Tissue Enrichment of significant DE (|log2FC| > 1.5)')
p
p <- ggplot(enrichmentOutput,aes(x=reorder(Tissue,-Log10PValue),y=Log10PValue,label = Tissue.Specific.Genes,fill = Tissue))+
geom_bar(stat = 'identity')+
labs(x='', y = '-log10(padj)')+
theme_bw()+
theme(legend.position="none")+
theme(plot.title = element_text(hjust = 0.5,size = 20),axis.title = element_text(size=15))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),panel.grid.major= element_blank(),panel.grid.minor = element_blank())
p <- p + ggtitle('Tissue Enrichment of significant DE (|log2FC| > 1.5)')
p
p
strPathSave = 'Results/TissueEnrichment'
ggsave('TissueEnrichment.png',plot = p, path = strPathSave, device = 'png')
unique(MetaDF$InflammationStatus)
t <- decideTests(et, lfc = 1.5) #filter
rownames(t) = et$genes$Entrez
genes <- rownames(t)[t == 1 | t == -1] #get genenames
en = enrichPathway(gene= genes, readable = T)
dotplot(en, showCategory=15)
emapplot(en)
cnetplot(en, node_label="category")
?cnetplot
t <- decideTests(et) #filter
rownames(t) = et$genes$Entrez
genes <- rownames(t)[t == 1 | t == -1] #get genenames
en = enrichPathway(gene= genes, readable = T)
dotplot(en, showCategory=15)
dp <- dotplot(en, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment: |log2FC| > 1.5')
dp
t <- decideTests(et, lfc = 1.5) #filter
rownames(t) = et$genes$Entrez
genes <- rownames(t)[t == 1 | t == -1] #get genenames
en = enrichPathway(gene= genes, readable = T)
dp <- dotplot(en, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment: |log2FC| > 1.5')
dp
dp <- dotplot(en, showCategory=15)
dp <- dp + ggtitle('ORA: |log2FC| > 1.5')
dp
ggsave('Reactome_ORA.png',plot = dp, path = strPathSave, device = 'png')
cp <- cnetplot(en, node_label="category")
cp <- cp + ggtitle('ORA: |log2FC| > 1.5')
cp
ggsave('Reactome_ORA_cnetplot.png',plot = cp, path = strPathSave, device = 'png')
strPathSave = 'Results/Reactome'
ggsave('Reactome_ORA_cnetplot.png',plot = cp, path = strPathSave, device = 'png')
genelist = -log10(et$table$PValue)*et$table$logFC
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
dotplot(ge, showCategory=20)
cp <- cnetplot(ge, node_label="category")
cp <- cp + gggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
cp
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
cp
ggsave('Reactome_GSEA_cnetplot_pvalFC.png',plot = cp, path = strPathSave, device = 'png')
dp <- dotplot(ge, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
ggsave('Reactome_GSEA_dotplot_pvalFC.png',plot = cp, path = strPathSave, device = 'png')
ggsave('Reactome_GSEA_dotplot_pvalFC.png',plot = dp, path = strPathSave, device = 'png')
dp
ggsave('Reactome_GSEA_dotplot_pvalFC.png',plot = dp, path = strPathSave, device = 'png')
upsetplot(ge)
up <- upsetplot(ge)
up <- up + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
up
dp
View(ge)
View(ge@result)
viewPathway('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell', readable = T, foldChange = genelist)
vp <- viewPathway('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell', readable = T, foldChange = genelist)
vp <- cp + ggtitle('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell')
vp
vp <- viewPathway('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell', readable = T, foldChange = genelist)
vp <- vp + ggtitle('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell')
vp
ggsave('Reactome_GSEA_vpImmunoreg_pvalFC.png',plot = vp, path = strPathSave, device = 'png')
genelist = -log10(et$table$PValue)
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
dp <- dotplot(ge, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval)')
dp
dp <- dotplot(ge, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval)')
ggsave('Reactome_GSEA_dotplot_pval.png',plot = dp, path = strPathSave, device = 'png')
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval)C')
cp
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval)')
cp
ggsave('Reactome_GSEA_cnetplot_pval.png',plot = cp, path = strPathSave, device = 'png')
up <- upsetplot(ge)
up <- up + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval)')
up
ggsave('Reactome_GSEA_upsetplot_pval.png',plot = up, path = strPathSave, device = 'png')
dp <- dotplot(ge, showCategory=15)
dp
vp <- viewPathway('Integrin cell surface interactions', readable = T, foldChange = genelist)
vp <- vp + ggtitle('Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell')
vp
vp <- viewPathway('Integrin cell surface interactions', readable = T, foldChange = genelist)
vp <- vp + ggtitle('Integrin cell surface interactions')
ggsave('Reactome_GSEA_vpIntegrin_pval.png',plot = vp, path = strPathSave, device = 'png')
ge@result$Description
write.csv(PathwayList, 'Results/DE/SignificantPathwaysGSEA_pvalFC.csv')
genelist = -log10(et$table$PValue)*et$table$logFC
names(genelist) = et$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
PathwayList = ge@result$Description
write.csv(PathwayList, 'Results/DE/SignificantPathwaysGSEA_pvalFC.csv')
ge@result$Description
ix_ordered = order(et$table$PValue)
all(et$genes$Row == rownames(tmm))
chromosome_location = et$genes$chr[ix_ordered]
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
ix_ordered = order(et$table$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
func = et$genes$gene_type[ix_ordered[1:20]]
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(func, name = "Type", width = unit(5, "mm"))
et_table_subset = subset(et$table, abs(et$table$logFC) > 1.5)
ix_ordered = order(et_table_subset$PValue)
Top20AcrossPatients = tmm[ix_ordered[1:20],]
chromosome_location = et$genes$chr[ix_ordered[1:20]]
new_rowlabels = CountMatrixSup$gene_name[match(rownames(Top20AcrossPatients) , CountMatrixSup$Row)]
# make heatmap for visualisation
mat = as.matrix(Top20AcrossPatients)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus),
annotation_height = unit(4, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 4, top_annotation = ha,
row_labels = new_rowlabels, column_names_gp = gpar(fontsize = 8), row_names_gp = gpar(fontsize = 8))+
Heatmap(chromosome_location, name = "Type", width = unit(5, "mm"))
