location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
t1 = Sys.time()
Heatmap(zscore, name = "z-score", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)
#+
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus,
location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
t1 = Sys.time()
Heatmap(as.matrix(tmm), name = "z-score", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)
# keep the top 500 variable genes
top500 = 1- (500 / dim(CountMatrix)[1])
#use log transformed tmm (normal distribution assumed for PCA)
p <- pca(tmm, metadata = MetaDF, removeVar = top500)
screeplot(p, axisLabSize = 10, titleLabSize = 18)
gnames <- rownames(tmm)
gsymbols <- CountMatrixSup$gene_name[match(gnames, CountMatrixSup$Row)]
tmm_symbols = tmm
rownames(tmm_symbols) = gsymbols
# Run PCA ----
set.seed(2021)
# keep the top 500 variable genes
top500 = 1- (500 / dim(CountMatrix)[1])
#use log transformed tmm (normal distribution assumed for PCA)
p <- pca(tmm, metadata = MetaDF, removeVar = top500)
p_new <- pca(tmm_symbols, metadata = MetaDF, removeVar = top500)
biplot(p_new,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Loadings',
axisLabSize = 10,
showLoadings = TRUE,
boxedLoadingsNames = FALSE)
?biplot
strPathSave
strPathSave = 'Results/PCA_v2.0'
biplot(p_new,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Loadings',
axisLabSize = 10,
showLoadings = TRUE,
boxedLoadingsNames = FALSE)
ggsave('InflammationColbyLoadingsBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
patient  <- as.factor(MetaDF$Subject)
location <- as.factor(MetaDF$Location)
inflammation <- as.factor(MetaDF$InflammationStatus)
design_location <- model.matrix(~Location+Tissue)
patient  <- as.factor(MetaDF$Subject)
location <- as.factor(MetaDF$Location)
inflammation <- as.factor(MetaDF$InflammationStatus)
design_location <- model.matrix(~Location+Tissue)
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
patient  <- as.factor(MetaDF$Subject)
location <- as.factor(MetaDF$Location)
inflammation <- as.factor(MetaDF$InflammationStatus)
design_location <- model.matrix(~Location+Tissue)
View(MetaDF)
design_location <- model.matrix(~location+Tissue)
design_location <- model.matrix(~location+inflammation)
rownames(design_location) <- colnames(y)
View(design_location)
design_location <- model.matrix(~0 + location+inflammation)
rownames(design_location) <- colnames(y)
View(design_location)
design_location <- model.matrix(~0 + location+inflammation, data = y$samples)
rownames(design_location) <- colnames(y)
View(design_location)
as.factor(MetaDF$InflammationStatus)
inflammation == 'Non-Inflamed'
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
iF <- MetaDF$InflammationStatus == 'Non-Inflamed'
iT <- MetaDF$InflammationStatus == 'Inflamed'
inflammation[iF] = 'F'
inflammation <- rep('T', times = dim(MetaDF)[1])
inflammation
inflammation[iF] = 'F'
inflammation <- as.factor(inflammation)
design_location <- model.matrix(~location+inflammation, data = y$samples)
# EdgeR ----
CountMatrix = CountMatrixSup[10:57];
rownames(CountMatrix) = CountMatrixSup$Row
#reorder to fit MetaData
CountMatrix = CountMatrix[order(colnames(CountMatrix))]
y <- DGEList(counts = CountMatrix, genes = CountMatrixSup[1:9], group = MetaDF$InflammationStatus)
design_location <- model.matrix(~location+inflammation, data = y$samples)
patient  <- as.factor(MetaDF$Subject)
location <- as.factor(MetaDF$Location)
design_location <- model.matrix(~location+inflammation, data = y$samples)
rownames(design_location) <- colnames(y)
keep <- filterByExpr(y) #filter out genes that are not expressed highly enough across all samples
y <- y[keep, , keep.lib.sizes=FALSE] # kicking them out + recalculating library size
#new approach
idfound <- y$genes$gene_name %in% mappedRkeys(org.Hs.egALIAS2EG)
y <- y[idfound,]
egSYMBOL <- toTable(org.Hs.egSYMBOL)
egEntrez <- toTable(org.Hs.egALIAS2EG)
m <- match(y$genes$gene_name, egEntrez$alias_symbol)
y$genes$Entrez <- egEntrez$gene_id[m]
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$Entrez)
y <- y[!d,]
nrow(y)
#recomputing lib size
y$samples$lib.size <- colSums(y$counts)
y <- estimateDisp(y, design_location, robust = TRUE)
fit <- glmFit(y, design_location)
lrt <- glmLRT(fit)
TopHits20Pval = topTags(lrt, n = 20) # internet says filter with pvals
View(TopHits20Pval)
View(lrt)
topTags(lrt)
topTags(lrt, n = 20)
TopHits20Pval = topTags(lrt, n = 20) # internet says filter with pvals
View(TopHits20Pval)
TopHits20Pval
write.csv(TopHits20Pval$table, 'Results/DE_GLMLocation/SummaryTop20Hits_GLMLocation.csv')
SummaryPval = summary(decideTests(lrt))
SummaryPval
SummaryFCandPval = summary(decideTests(lrt, lfc = 1.5)) #apparently not recommended to also have fc cutoff
SummaryFCandPval
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
et_low = data.frame(FC = et$table$logFC[et$table$logFC < -1.5 & et$table$PValue < 0.05],
FDR = et$table$PValue[et$table$logFC < -1.5 & et$table$PValue < 0.05])
et_high = data.frame(FC = et$table$logFC[et$table$logFC > 1.5 & et$table$PValue < 0.05],
FDR = et$table$PValue[et$table$logFC > 1.5 & et$table$PValue < 0.05])
g <- g + geom_point(data = et_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = et_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05, |log2FC| > 1.5')
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
lrt_low = data.frame(FC = lrt$table$logFC[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05])
lrt_high = data.frame(FC = lrt$table$logFC[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05])
g <- g + geom_point(data = lrt_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = lrt_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05, |log2FC| > 1.5')
g
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
lrt_low = data.frame(FC = lrt$table$logFC[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05])
lrt_high = data.frame(FC = lrt$table$logFC[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05])
g <- g + geom_point(data = lrt_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = lrt_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05, |log2FC| > 1.5')
strPathSave = 'Results/DE_GLMLocation'
ggsave('DE_VolcanoPlotFDRlFC.png',plot = g, path = strPathSave, device = 'png')
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
lrt_low = data.frame(FC = lrt$table$logFC[lrt$table$logFC < 0 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC < 0& lrt$table$PValue < 0.05])
lrt_high = data.frame(FC = lrt$table$logFC[lrt$table$logFC > 0& lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC >0 & lrt$table$PValue < 0.05])
g <- g + geom_point(data = lrt_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = lrt_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05')
g
strPathSave = 'Results/DE_GLMLocation'
ggsave('DE_VolcanoPlotFDR.png',plot = g, path = strPathSave, device = 'png')
#libraries
library(edgeR)
library(tidyverse)
library('statmod')
library("AnnotationDbi")
library(org.Hs.eg.db)
library(ChIPpeakAnno)
library(stringr)
library(ReactomePA)
library(signatureSearch)
library('ggnewscale')
library(clusterProfiler)
library('ggupset')
genelist = -log10(lrt$table$PValue)*lrt$table$logFC
names(genelist) = lrt$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
PathwayList = ge@result$Description
cp <- cnlrtplot(ge, node_label="category")
library(edgeR)
library(tidyverse)
library('statmod')
library("AnnotationDbi")
library(org.Hs.eg.db)
library(ChIPpeakAnno)
library(stringr)
library(ReactomePA)
library(signatureSearch)
library('ggnewscale')
library(clusterProfiler)
library('ggupset')
library(PCAtools)
library(edgeR)
library(tidyverse)
library('statmod')
library("AnnotationDbi")
library(org.Hs.eg.db)
library(ChIPpeakAnno)
library(stringr)
library(ReactomePA)
library('biomaRt')
cp <- cnlrtplot(ge, node_label="category")
library(DOSE)
cp <- cnlrtplot(ge, node_label="category")
library(enrichplot)
cp <- cnlrtplot(ge, node_label="category")
?cnlrtplot
dp <- dotplot(ge, showCategory=15)
dp
cp <- cnlrtplot(ge, node_label="category")
??cnlrtplot
data(geneList)
cp <- cnlrtplot(ge, node_label="category")
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
cp
genelist = -log10(lrt$table$PValue)*lrt$table$logFC
names(genelist) = lrt$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
PathwayList = ge@result$Description
write.csv(PathwayList, 'Results/DE/SignificantPathwaysGSEA_pvalFC.csv')
#plot-options
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
ggsave('Reactome_GSEA_cnlrtplot_pvalFC.png',plot = cp, path = strPathSave, device = 'png')
dp <- dotplot(ge, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
ggsave('Reactome_GSEA_dotplot_pvalFC.png',plot = dp, path = strPathSave, device = 'png')
design_patients <- model.matrix(~patient+inflammation, data = y$samples)
rownames(design_patients) <- colnames(y)
y <- estimateDisp(y, design_patients, robust = TRUE)
SummaryPval
pie(SummaryPval, rownames(SummaryPval), main = 'Summary DE analysis: filter FDR < 0.05')
pie(SummaryFCandPval, rownames(SummaryFCandPval), main = 'Summary DE analysis: filter FDR < 0.05 & log2FC > 1.5')
TopHits20Pval = topTags(lrt, n = 20) # internlrt says filter with pvals
TopHits20Pval
write.csv(TopHits20Pval$table, 'Results/DE_GLMPatients/SummaryTop20Hits_GLMPatiens.csv')
SummaryPval = summary(decidlrtests(lrt))
SummaryFCandPval = summary(decidlrtests(lrt, lfc = 1.5)) #apparently not recommended to also have fc cutoff
pie(SummaryPval, rownames(SummaryPval), main = 'Summary DE analysis: filter FDR < 0.05')
pie(SummaryFCandPval, rownames(SummaryFCandPval), main = 'Summary DE analysis: filter FDR < 0.05 & log2FC > 1.5')
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
lrt_low = data.frame(FC = lrt$table$logFC[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC < -1.5 & lrt$table$PValue < 0.05])
lrt_high = data.frame(FC = lrt$table$logFC[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC > 1.5 & lrt$table$PValue < 0.05])
g <- g + geom_point(data = lrt_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = lrt_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05, |log2FC| > 1.5')
strPathSave = 'Results/DE_GLMPatients'
ggsave('DE_VolcanoPlotFDRlFC.png',plot = g, path = strPathSave, device = 'png')
#volcano plot
df_plotting = data.frame(log2FC = lrt$table$logFC, FDR = lrt$table$PValue)
g <- ggplot(data = df_plotting, aes(x = log2FC, y = -log10(FDR))) +geom_point()
lrt_low = data.frame(FC = lrt$table$logFC[lrt$table$logFC < 0 & lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC < 0& lrt$table$PValue < 0.05])
lrt_high = data.frame(FC = lrt$table$logFC[lrt$table$logFC > 0& lrt$table$PValue < 0.05],
FDR = lrt$table$PValue[lrt$table$logFC >0 & lrt$table$PValue < 0.05])
g <- g + geom_point(data = lrt_low, aes(x = FC, y = -log10(FDR)), color='red')
g <- g + geom_point(data = lrt_high, aes(x = FC, y = -log10(FDR)), color='blue')
g <- g +ggtitle('Volcano Plot: FDR < 0.05')
strPathSave = 'Results/DE_GLMPatients'
ggsave('DE_VolcanoPlotFDR.png',plot = g, path = strPathSave, device = 'png')
SummaryPval = summary(decideTests(lrt))
SummaryFCandPval = summary(decideTests(lrt, lfc = 1.5)) #apparently not recommended to also have fc cutoff
pie(SummaryPval, rownames(SummaryPval), main = 'Summary DE analysis: filter FDR < 0.05')
pie(SummaryFCandPval, rownames(SummaryFCandPval), main = 'Summary DE analysis: filter FDR < 0.05 & log2FC > 1.5')
genelist = -log10(lrt$table$PValue)*lrt$table$logFC
names(genelist) = lrt$genes$Entrez
genelist <- sort(genelist, decreasing = TRUE)
ge = gsePathway(genelist,  eps = 0)
PathwayList = ge@result$Description
#plot-options
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
cp
cp <- cnetplot(ge, node_label="category")
cp <- cp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
ggsave('Reactome_GSEA_cnlrtplot_pvalFC.png',plot = cp, path = strPathSave, device = 'png')
dp <- dotplot(ge, showCategory=15)
dp <- dp + ggtitle('Pathway Enrichment (GSEA): Pre-ranked -log10(pval) * log2FC')
ggsave('Reactome_GSEA_dotplot_pvalFC.png',plot = dp, path = strPathSave, device = 'png')
Top10PC1
p <- pca(tmm, metadata = MetaDF, removeVar = top500)
y_norm <- calcNormFactors(y, method = 'TMM') #corrects for highly variable genes overshadowing all other effects
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #TMM, with normalisation for highly variable genes
set.seed(2021)
# keep the top 500 variable genes
top500 = 1- (500 / dim(CountMatrix)[1])
#use log transformed tmm (normal distribution assumed for PCA)
p <- pca(tmm, metadata = MetaDF, removeVar = top500)
#access loading
Loadings = p$loadings
?groupGO
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_ensemblnames
Top10PC2_function = CountMatrixSup$chr[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
Top10PC2_function
Top10PC1_function = CountMatrixSup$chr[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1 = SortPC1Loadings[1:10,]
Top10PC1_ensemblnames = rownames(SortPC1Loadings)[1:10]
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function = CountMatrixSup$chr[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Loadings = p$loadings
#PC1
SortPC1Loadings = Loadings[order(abs(Loadings[,1]), decreasing = TRUE),]
Top10PC1 = SortPC1Loadings[1:10,]
Top10PC1_ensemblnames = rownames(SortPC1Loadings)[1:10]
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function = CountMatrixSup$chr[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_normalnames
Top10PC2_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
Top10PC2_normalnames
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
highlighted
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
Top10PC2_function = CountMatrixSup$chr[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
View(melted_Loadings)
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
View(highlighted)
Top10PC2_normalnames = CountMatrixSup$gene_name[match(Top10PC2_ensemblnames, CountMatrixSup$Row)]
Top10PC2_normalnames
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
lp
strPathSave
strPathSave = 'Results/PCA_v2.0'
ggsave('LoadingsPC2PCA_log2TMM.png', path = strPathSave, device = 'png')
strPathSave
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_normalnames = CountMatrixSup$gene_name[match(Top10PC2_ensemblnames, CountMatrixSup$Row)]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
ggsave('LoadingsPC2PCA_log2TMM.png', path = strPathSave, device = 'png')
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_normalnames = CountMatrixSup$gene_name[match(Top10PC2_ensemblnames, CountMatrixSup$Row)]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
lp
ggsave('LoadingsPC2PCA_log2TMM.png', path = strPathSave, device = 'png')
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
# EdgeR ----
CountMatrix = CountMatrixSup[10:57];
rownames(CountMatrix) = CountMatrixSup$Row
#reorder to fit MetaData
CountMatrix = CountMatrix[order(colnames(CountMatrix))]
y <- DGEList(counts = CountMatrix, genes = CountMatrixSup[1:9], group = MetaDF$InflammationStatus)
keep <- filterByExpr(y) #filter out genes that are not expressed highly enough across all samples
y <- y[keep, , keep.lib.sizes=FALSE] # kicking them out + recalculating library size
y_norm <- calcNormFactors(y, method = 'TMM') #corrects for highly variable genes overshadowing all other effects
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #TMM, with normalisation for highly variable genes
patient  <- as.factor(MlrtaDF$Subject)
location <- as.factor(MlrtaDF$Location)
iF <- MlrtaDF$InflammationStatus == 'Non-Inflamed'
iT <- MlrtaDF$InflammationStatus == 'Inflamed'
inflammation <- rep('T', times = dim(MlrtaDF)[1])
inflammation[iF] = 'F'
inflammation <- as.factor(inflammation)
design_location <- model.matrix(~location+inflammation, data = y$samples)
rownames(design_location) <- colnames(y)
patient  <- as.factor(MetaDF$Subject)
location <- as.factor(MetaDF$Location)
iF <- MetaDF$InflammationStatus == 'Non-Inflamed'
iT <- MetaDF$InflammationStatus == 'Inflamed'
inflammation <- rep('T', times = dim(MetaDF)[1])
inflammation[iF] = 'F'
inflammation <- as.factor(inflammation)
design_location <- model.matrix(~location+inflammation, data = y$samples)
rownames(design_location) <- colnames(y)
idfound <- y$genes$gene_name %in% mappedRkeys(org.Hs.egALIAS2EG)
y <- y[idfound,]
egSYMBOL <- toTable(org.Hs.egSYMBOL)
egEntrez <- toTable(org.Hs.egALIAS2EG)
m <- match(y$genes$gene_name, egEntrez$alias_symbol)
y$genes$Entrez <- egEntrez$gene_id[m]
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$Entrez)
y <- y[!d,]
nrow(y)
#recomputing lib size
y$samples$lib.size <- colSums(y$counts)
y <- estimateDisp(y, design_location, robust = TRUE)
BV <- sqrt(y$common.dispersion)
plotBCV(y) # read up on this, i don't really know what this means
#DE analysis
fit <- glmFit(y, design_location)
lrt <- glmQLFTest(fit)
fit <- glmQLFit(y, design_location)
lrt <- glmQLFTest(fit)
TopHits20Pval = topTags(lrt, n = 20) # internlrt says filter with pvals
TopHits20Pval
?teEnrichment
library(TissueEnrich)
?teEnrichment
