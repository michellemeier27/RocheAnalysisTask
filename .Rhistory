class(final_df)
class(final_df[1])
class(final_df)
class(all_melted)
class(all_melted[1])
#get txt file with all lengths
txt_file <- read.csv("/Users/michellemeier/Desktop/tara_all.csv", header = T)
d <- dim(txt_file)[2]
d
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
dim(final_df)
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002"))+ scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA")
gl
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) #+ scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA")
gl
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA")
gl
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA") + labs(fill= "assembler/polisher") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
ggsave("TARA_all_log", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies")
ggsave(filename = "TARA_all_log", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies")
ggsave(filename = "TARA_all_log.png", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies")
#get txt file with all lengths
txt_file <- read.csv("/Users/michellemeier/Desktop/all_names_mouse.csv", header = T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
dim(final_df)
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA") + labs(fill= "assembler/polisher") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
gl <- gl + ggtitle("TARA") + labs(fill= "assembler/polisher") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
gl <- gl + ggtitle("TARA") + labs(fill="assembler/polisher") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MPUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
head(txt_file)
txt_file <- txt_file[, -8]
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
txt_file <- read.csv("/Users/michellemeier/Desktop/all_names_mouse.csv", header = T)
txt_file <- txt_file[, -8]
txt_file <- txt_file[, -7]
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
txt_file <- read.csv("/Users/michellemeier/Desktop/all_names_mouse.csv", header = T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
ggsave(filename = "MOUSE_all_log.png", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies/results/MOUSE/")
#load all packages
library(ggbiplot)
library(ggpubr)
#get txt file with all lengths
txt_file <- read.csv("/Users/michellemeier/Desktop/all_mouse_whole_genes.csv", header = T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
ggsave(filename = "MOUSE_all_log_cutoff.png", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies/results/MOUSE/")
#load all packages
library(ggbiplot)
library(ggpubr)
#get txt file with all lengths
txt_file <- read.csv("/Users/michellemeier/Desktop/gene_lengths_all_genomes.csv", header = T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
d
final_df
txt_file
colnames(final_df) <- c("gene_length", "real_genomes")
g <- ggplot(final_df, aes(x = genelengths, y = real_genomes)) + geom_point()
g
g <- ggplot(final_df, aes(x = gene_length, y = real_genomes)) + geom_point()
g
g <- ggplot(final_df, aes(x = gene_length, y = real_genomes)) + geom_point()scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
g
g <- ggplot(final_df, aes(x = gene_length, y = real_genomes)) + geom_point() + scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
g
#get txt file with all lengths
true_genomes <- read.csv("/Users/michellemeier/Desktop/gene_lengths_all_genomes.csv", header = T)
txt_file <- read.csv("/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies/data/MOUSE/all_mouse_whole_genes.csv", header=T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
head(final_df)
#add true genomes
count_true_genomes <- as.data.frame(table(true_genomes))
head(count_true_genomes)
final_df <- merge(final_df, count, by="genelengths")
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
#get txt file with all lengths
true_genomes <- read.csv("/Users/michellemeier/Desktop/gene_lengths_all_genomes.csv", header = T)
txt_file <- read.csv("/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies/data/MOUSE/all_mouse_whole_genes.csv", header=T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
head(final_df)
#add true genomes
count_true_genomes <- as.data.frame(table(true_genomes))
colnames(count_true_genomes) <- c("genelengths", "true_genomes")
final_df <- merge(final_df, count_true_genomes, by="genelengths")
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
txt_file <- read.csv("/Users/michellemeier/Desktop/all_names_flye.csv", header=T)
head(txt_file)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
head(final_df)
df <- as.data.frame(table(txt_file[,2]))
list(final_df, df)
l >- list(final_df, df)
l <- list(final_df, df)
unlist(l)
head(df)
library(ggbiplot)
library(ggpubr)
head(final_df)
df
head(df)
p <- ggplot() + geom_line(data= final_df, aes(genelengths,flye.1.2Gb)) + geom_line(data=df, aes(Var1, Freq))
p
head(final_df)
library(ggbiplot)
p
p <- ggplot() + geom_line(data= final_df, aes(genelengths, flye.1.2Gb.)) + geom_line(data=df, aes(Var1, Freq))
p
p <- ggplot() + geom_point(data= final_df, aes(genelengths, flye.1.2Gb.)) + geom_point(data=df, aes(Var1, Freq))
p
head(txt_file)
p <- ggplot() + geom_point(data= final_df, aes(genelengths, flye.1.2Gb.)) + geom_point(data=df, aes(Var1, Freq))
p <- p + xlab("Frequencies")
colnames(flye.1.2) <- c("genelengths",name)
p <- ggplot() + geom_point(data= final_df, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= final_df, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= final_df, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= final_df, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= final_df, aes(genelengths, flye.300.racon5))
p <- p + xlab("Frequencies")
colnames(flyehypo) <- c("genelengths",name)
txt_file <- read.csv("/Users/michellemeier/Desktop/all_names_flye.csv", header=T)
flye.1.2 <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(flye.1.2) <- c("genelengths",name)
flyehypo <- as.data.frame(table(txt_file[,2]))
name <- colnames(txt_file)[2]
colnames(flyehypo) <- c("genelengths",name)
flye_nosize <- as.data.frame(table(txt_file[,3]))
name <- colnames(txt_file)[3]
colnames(flye_nosize) <- c("genelengths",name)
flyepilon <- as.data.frame(table(txt_file[,4]))
name <- colnames(txt_file)[4]
colnames(flyepilon) <- c("genelengths",name)
flyeracon <- as.data.frame(table(txt_file[,5]))
name <- colnames(txt_file)[5]
colnames(flyeracon) <- c("genelengths",name)
p <- ggplot() + geom_point(data= final_df, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= final_df, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= final_df, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= final_df, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= final_df, aes(genelengths, flye.300.racon5))
p <- p + xlab("Frequencies")
p
head(flyehypo)
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + xlab("Frequencies")
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")+ scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")+ scale_x_discrete(breaks=c("1002"))
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")+ scale_x_discrete(breaks=c("2000"))
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies") + gghighlight(max(flye.1.2Gb.))
p
max(flye_nosize[2,])
mac(flye.1.2Gb.[2,])
flye.1.2Gb.[2,]
flye_nosize[2,]
mac(flye_nosize[,2])
max(flye_nosize[,2])
flye_nosize[flye_nosize$flye.nosize. == max(flye_nosize[,2],)
]
flye_nosize[flye_nosize$flye.nosize. == max(flye_nosize[,2] ,)
{}
m <- max(flye_nosize[,2]
)
m
flye_nosize[flye_nosize$flye.nosize. == m,]
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")+ scale_x_continuous(breaks=seq(0,4000,100))
p
p <- ggplot() + geom_point(data= flye.1.2, aes(genelengths, flye.1.2Gb.), color = "blue") + geom_point(data= flyehypo, aes(genelengths, flye.300.hypo1), color = "green")
p <- p+ geom_point(data= flye_nosize, aes(genelengths, flye.nosize.), color = "red") +geom_point(data= flyepilon, aes(genelengths, flye.300.pilon2), color = "yellow") + geom_point(data= flyeracon, aes(genelengths, flye.300.racon5))
p <- p + ylab("Frequencies")+ scale_x_discrete(breaks=seq(0,4000,100))
p
#get txt file with all lengths
true_genomes <- read.csv("/Users/michellemeier/Desktop/all_names_flye.csv", header = T)
txt_file <- read.csv("/Users/michellemeier/Desktop", header=T)
d <- dim(txt_file)[2]
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#add true genomes
count_true_genomes <- as.data.frame(table(true_genomes))
colnames(count_true_genomes) <- c("genelengths", "true_genomes")
final_df <- merge(final_df, count_true_genomes, by="genelengths")
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
final_df <- as.data.frame(table(txt_file[,1]))
name <- colnames(txt_file)[1]
colnames(final_df) <- c("genelengths",name)
#run a loop over all columns to get count data for all assemblies/pipelines
for (i in 2:d){
#get count table
count <- as.data.frame(table(txt_file[,i]))
#get name of assembly/pipeline
name <- colnames(txt_file)[i]
colnames(count) <- c("genelengths",name)
#merge together. caveat: merging, only same genelengths
final_df <- merge(final_df, count, by="genelengths")
}
#add true genomes
#count_true_genomes <- as.data.frame(table(true_genomes))
#colnames(count_true_genomes) <- c("genelengths", "true_genomes")
#final_df <- merge(final_df, count_true_genomes, by="genelengths")
#melting for optimal plotting
all_melted <- reshape2::melt(final_df, id.var='genelengths')
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("MOUSE", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") #+ ylab("log(Freq)")
gl
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") #+ ylab("log(Freq)")
gl
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) #+ scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
#plotting using ggplot2
gl <- ggplot(all_melted, aes(x = genelengths, y= value, col=variable)) +geom_point()+scale_x_discrete(breaks=c("1002")) + scale_y_continuous(trans="log2")
gl <- gl + ggtitle("TARA", subtitle = "contig cutoff 5000bp") + xlab( "gene length [bp]") + ylab("log(Freq)")
gl
ggsave(filename = "TARA_flye_log_cutoff.png", plot = gl, path = "/Users/michellemeier/Documents/ETH_Assistenz/HS20/shini_assemblies/results/TARA/")
# Set WD and load all packages ----
# set wd
setwd("//Users/michellemeier/RocheAnalysisTask/")
#libraries
library(GEOquery)
library(stringr)
library(PCAtools)
library(edgeR)
library(tidyverse)
library(reshape2)
library("circlize")
library("RColorBrewer")
library(ComplexHeatmap)
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
# EdgeR ----
CountMatrix = CountMatrixSup[10:57];
rownames(CountMatrix) = CountMatrixSup$Row
#reorder to fit MetaData
CountMatrix = CountMatrix[order(colnames(CountMatrix))]
y <- DGEList(counts = CountMatrix, genes = CountMatrixSup[1:9], group = MetaDF$InflammationStatus)
keep <- filterByExpr(y) #filter out genes that are not expressed highly enough across all samples
y <- y[keep, , keep.lib.sizes=FALSE] # kicking them out + recalculating library size
y_norm <- calcNormFactors(y, method = 'TMM') #corrects for highly variable genes overshadowing all other effects
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #TMM, with normalisation for highly variable genes
#libraries
library(PCAtools)
library(edgeR)
library(tidyverse)
library(reshape2)
library("circlize")
library("RColorBrewer")
library(ComplexHeatmap)
top500 = 1- (500 / dim(CountMatrix)[1])
#use log transformed tmm (normal distribution assumed for PCA)
p <- pca(tmm, metadata = MetaDF, removeVar = top500)
biplot(p,
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location + Subject',
axisLabSize = 10)
strPathSave = 'Results/PCA'
ggsave('LocationColbybBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
# color location
biplot(p,
lab = '',
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location',
axisLabSize = 10)
strPathSave = 'Results/PCA'
ggsave('LocationColbybBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
