legendPosition = 'right',
showLoadings = TRUE)
eigencorplot(p, metavars = colnames(MetaDF) )
biplot(p,
lab = p$metadata$InflammationStatus,
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right',
showLoadings = TRUE)
dim(CountMatrix)
lengthm(CountMatrix)
length(CountMatrix)
dim(CountMatrix)[2]
dim(CountMatrix)[1]
top500 = 500 / dim(CountMatrix)[1]
top500
top500 = 1- (500 / dim(CountMatrix)[1])
top500
screeplot(p, axisLabSize = 18, titleLabSize = 22)
screeplot(p, axisLabSize = 10, titleLabSize = 22)
screeplot(p, axisLabSize = 10, titleLabSize = 18)
biplot(p,
lab = p$metadata$InflammationStatus,
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right')
eigencorplot(p, metavars = colnames(MetaDF) )
?eigencorplot
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation')
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1)
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1.5,
cexLabX = 0.5, cexLabY = 0.5)
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1.5,
cexLabX = 0.7, cexLabY = 0.7)
# Eigencorrelation ----
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1.5,
cexLabX = 0.7, cexLabY = 0.7, cexLabColKey = 0.7)
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1.5,
cexLabX = 0.7, cexLabY = 0.7, cexLabColKey = 0.7, cexCorval = 0.7)
strPathSave = 'Results/PCA'
ggsave('Eigencorrelation', path = strPathSave, device = 'png')
eigencorplot(p, metavars = colnames(MetaDF) , main = 'Eigencorrelation', cexMain = 1.5,
cexLabX = 0.7, cexLabY = 0.7, cexLabColKey = 0.7, cexCorval = 0.7)
strPathSave = 'Results/PCA'
ggsave('Eigencorrelation.png', path = strPathSave, device = 'png')
reshape_tmm <- melt(tmm)
colnames(reshape_tmm) = c('Gene', 'Sample', 'Count')
bp_tmm <- ggplot(reshape_tmm, aes(x=Sample, y=Count))+ geom_boxplot()+ggtitle('TMM normalised gene count distribution')
bp_tmm <- bp_tmm + theme(axis.text.x = element_text(angle = 90))
reshape_cpm <- melt(cpm)
colnames(reshape_cpm) = c('Gene', 'Sample', 'Count')
bp_cpm <- ggplot(reshape_cpm, aes(x=Sample, y=Count))+ geom_boxplot()+ggtitle('CPM normalised gene count distribution')
bp_cpm <- bp_cpm + theme(axis.text.x = element_text(angle = 90))
#save them
strPathSave = 'Results/QC'
ggsave('QC_TMMDistribution.png',plot = bp_tmm, path = strPathSave, device = 'png')
ggsave('QC_CPMDistribution.png',plot = bp_cpm, path = strPathSave, device = 'png')
biplot(p,
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right')
?biplot
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right')
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA')
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Simple Overview')
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Simple Overview',
axisLabSize = 10)
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Simple Overview',
axisLabSize = 10)
strPathSave = 'Results/PCA'
ggsave('InflammationColbyBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
biplot(p,
lab = p$metadata$Location,
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location + Inflammation',
axisLabSize = 10)
#color inflammation and label location
biplot(p,
lab = p$metadata$Location,
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location + Inflammation',
axisLabSize = 10)
strPathSave = 'Results/PCA'
ggsave('InflammationColbyLocationLabBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
biplot(p,
lab = p$metadata$Subject,
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location + Subject',
axisLabSize = 10)
biplot(p,
lab = p$metadata$Subject,
colby = 'Location',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Location + Subject',
axisLabSize = 10)
strPathSave = 'Results/PCA'
ggsave('LocationColbySubjectLabBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Simple Overview',
axisLabSize = 10,
showLoadings = TRUE,
boxedLoadingsNames = FALSE)
View(CountMatrixSup)
unique(CountMatrixSup$gene_name)
length(unique(CountMatrixSup$gene_name))
length(CountMatrixSup$gene_name)
biplot(p,
lab = '',
colby = 'InflammationStatus',
hline = 0, vline = 0,
legendPosition = 'right',
title = 'PCA: Loadings',
axisLabSize = 10,
showLoadings = TRUE,
boxedLoadingsNames = FALSE)
strPathSave = 'Results/PCA'
ggsave('InflammationColbyLoadingsBiplotPCA_log2TMM.png', path = strPathSave, device = 'png')
?plotloadings
plotloadings(p, labSize = 3)
p$loadings[1:5,1:5]
SortPC1Loadings = sort(p$loadings[,1])
SortPC1Loadings = Loadings[sort(Loadings[,1]),]
Loadings = p$loadings
SortPC1Loadings = Loadings[sort(Loadings[,1]),]
View(Loadings)
SortPC1Loadings = Loadings[order(Loadings[,1]),]
View(SortPC1Loadings)
View(SortPC1Loadings)
Top10PC1 = SortPC1Loadings[1:10]
View(y_norm)
View(Top10PC1)
Top10PC1 = SortPC1Loadings[1:10,1]
Top10PC1 = SortPC1Loadings[1:10,]
Top10PC1_ensemblnames = rownames(SortPC1Loadings)[1:10]
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
View(Top10PC1_normalnames)
Top10PC1_normalnames = CountMatrixSup[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function = CountMatrixSup$gene_type[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
View(Top10PC1_function)
View(Top10PC1_normalnames)
View(Loadings)
melted_Loadings= melt(Loadings)
View(melted_Loadings)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point()
melted_Loadings= melt(Loadings[,1:5])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point()
melted_Loadings= melt(Loadings[,1:5])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point(aes(size=value))
highlighted = data.frame(variable = melted_Loadings$variable[1:10],
value = melted_Loadings$value[1:10])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3)
highlighted = data.frame(variable = melted_Loadings$variable[1:10],
value = Top10PC1[,1])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3)
order(Loadings[,1])
Loadings = p$loadings
SortPC1Loadings = Loadings[order(abs(Loadings[,1])),]
Top10PC1 = SortPC1Loadings[1:10,]
Top10PC1_ensemblnames = rownames(SortPC1Loadings)[1:10]
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function = CountMatrixSup$gene_type[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[1:10],
value = Top10PC1[,1])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3)
?order
SortPC1Loadings = Loadings[order(abs(Loadings[,1]), decreasing = TRUE),]
Top10PC1 = SortPC1Loadings[1:10,]
Top10PC1_ensemblnames = rownames(SortPC1Loadings)[1:10]
Top10PC1_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
Top10PC1_function = CountMatrixSup$gene_type[CountMatrixSup$Row %in% Top10PC1_ensemblnames]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[1:10],
value = Top10PC1[,1])
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3)
highlighted = data.frame(variable = melted_Loadings$variable[1:10],
value = Top10PC1[,1],
name = Top10PC1_normalnames)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text(data = highlighted, aes(x=variable, y=value, label=name))
?geom_text
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text(data = highlighted, aes(x=variable, y=value, label=name),
nudge_x = 0.25, nudge_y = 0.25)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.25, nudge_y = 0.25)
name = Top10PC1_normalnames)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.025, nudge_y = 0.025)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.5, nudge_y = 0.025)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name))
?geom_text_repel
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.5, max.overlaps = 2)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.5, max.overlaps = 50)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.8, max.overlaps = 50)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = 0.6, max.overlaps = 50)
ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC1')
lp
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC1')
strPathSave = 'Results/PCA'
ggsave('LoadingsPC1PCA_log2TMM.png', path = strPathSave, device = 'png')
SortPC1Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
View(SortPC2Loadings)
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
Top10PC2_function = CountMatrixSup$gene_type[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
melted_Loadings= melt(Loadings[2,1:5])
View(melted_Loadings)
melted_Loadings= melt(Loadings[,2])
View(melted_Loadings)
View(Loadings)
melted_Loadings= stack(Loadings[,2])
melted_Loadings= melt(Loadings[,1:5])
View(melted_Loadings)
View(Loadings)
SortPC2Loadings = Loadings[order(abs(Loadings[,2]), decreasing = TRUE),]
Top10PC2 = SortPC2Loadings[1:10,]
Top10PC2_ensemblnames = rownames(SortPC2Loadings)[1:10]
Top10PC2_normalnames = CountMatrixSup$gene_name[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
Top10PC2_function = CountMatrixSup$gene_type[CountMatrixSup$Row %in% Top10PC2_ensemblnames]
melted_Loadings= melt(Loadings[,1:5])
highlighted = data.frame(variable = melted_Loadings$variable[129:139],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
lp
highlighted = data.frame(variable = melted_Loadings$variable[129:139],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
View(Top10PC2)
View(Top10PC2_ensemblnames)
View(Top10PC2_normalnamesnames)
View(Top10PC2_normalnames)
highlighted = data.frame(variable = melted_Loadings$variable[129:139],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
highlighted2 = data.frame(variable = melted_Loadings$variable[129:139],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
melted_Loadings$variable[129:139]
Top10PC2[,2]
highlighted = data.frame(variable = melted_Loadings$variable[129:138],
value = Top10PC2[,2],
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
lp
name = Top10PC2_normalnames)
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
strPathSave = 'Results/PCA'
ggsave('LoadingsPC2PCA_log2TMM.png', path = strPathSave, device = 'png')
lp <- ggplot(melted_Loadings, aes(x=variable, y=value)) +
geom_point() + geom_point(data = highlighted, aes(x=variable, y=value), color='red',
size=3) + geom_text_repel(data = highlighted, aes(x=variable, y=value, label=name),nudge_x = -0.6, max.overlaps = 50)
lp <- lp + ggtitle('Loadings PC2')
strPathSave = 'Results/PCA'
ggsave('LoadingsPC2PCA_log2TMM.png', path = strPathSave, device = 'png')
SummaryLoadingsPC1 = cbind(Top10PC1[,1], Top10PC1_ensemblnames, Top10PC1_normalnames, Top10PC1_function)
View(SummaryLoadingsPC1)
SummaryLoadingsPC1 = cbind(Top10PC1[,1], Top10PC1_ensemblnames, Top10PC1_normalnames, Top10PC1_function)
colnames(SummaryLoadingsPC1) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
SummaryLoadingsPC2 = cbind(Top10PC2[,2], Top10PC2_ensemblnames, Top10PC2_normalnames, Top10PC2_function)
colnames(SummaryLoadingsPC2) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
?write.csv
SummaryLoadingsPC1 = cbind(Top10PC1[,1], Top10PC1_ensemblnames, Top10PC1_normalnames, Top10PC1_function)
colnames(SummaryLoadingsPC1) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
write.csv(SummaryLoadingsPC1, 'Results/PCA/SummaryLoadingsPC1_log2TMM')
SummaryLoadingsPC2 = cbind(Top10PC2[,2], Top10PC2_ensemblnames, Top10PC2_normalnames, Top10PC2_function)
colnames(SummaryLoadingsPC2) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
write.csv(SummaryLoadingsPC2, 'Results/PCA/SummaryLoadingsPC2_log2TMM')
SummaryLoadingsPC1 = cbind(Top10PC1[,1], Top10PC1_ensemblnames, Top10PC1_normalnames, Top10PC1_function)
colnames(SummaryLoadingsPC1) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
write.csv(SummaryLoadingsPC1, 'Results/PCA/SummaryLoadingsPC1_log2TMM.csv')
SummaryLoadingsPC2 = cbind(Top10PC2[,2], Top10PC2_ensemblnames, Top10PC2_normalnames, Top10PC2_function)
colnames(SummaryLoadingsPC2) = c('Loading', 'ensembl', 'gene_names', 'gene_type')
write.csv(SummaryLoadingsPC2, 'Results/PCA/SummaryLoadingsPC2_log2TMM.csv')
Heatmap(mat[1:200,], name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type[1:200], name = "Type", width = unit(5, "mm"))
t1 = Sys.time()
Heatmap(mat[1:200,], name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type[1:200], name = "Type", width = unit(5, "mm"))
t2 = Sys.time()
t2-t1
length(CountMatrix)
dim(CountMatrix)
200/60498
diff =t2-t1
diff
diff/200
(diff/200) * dim(CountMatrix)[1]
343.1704/60
t1 = Sys.time()
Heatmap(mat, name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type, name = "Type", width = unit(5, "mm"))
t2 = Sys.time()
diff =t2-t1
mat = as.matrix(tmm)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus,
location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
t1 = Sys.time()
Heatmap(mat, name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type, name = "Type", width = unit(5, "mm"))
t2 = Sys.time()
diff =t2-t1
mat = as.matrix(tmm)
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus,
location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
dim(CountMatrixSup$gene_type)
length(CountMatrixSup$gene_type)
dim(mat)
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
# EdgeR ----
CountMatrix = CountMatrixSup[10:57];
rownames(CountMatrix) = CountMatrixSup$Row
#reorder to fit MetaData
CountMatrix = CountMatrix[order(colnames(CountMatrix))]
y <- DGEList(counts = CountMatrix)
keep <- filterByExpr(y) #filter out genes that are not expressed highly enough across all samples
y <- y[keep, , keep.lib.sizes=FALSE] # kicking them out + recalculating library size
y_norm <- calcNormFactors(y, method = 'TMM') #corrects for highly variable genes overshadowing all other effects
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #TMM, with normalisation for highly variable genes
mat = as.matrix(tmm)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus,
location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
t1 = Sys.time()
Heatmap(mat, name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type, name = "Type", width = unit(5, "mm"))
t2 = Sys.time()
diff =t2-t1
mat = as.matrix(tmm)
View(mat)
dim(mat)
dim(tmm)
# Load data ----
CountMatrixSup <- read.delim('DataSet/GSE107593_raw_reads_BCHRNAseq.txt', check.names = FALSE)
C = colnames(CountMatrixSup)[10:57]
# load Meta Data with GEO reference
GDS <- getGEO(GEO = 'GSE107593',GSEMatrix = TRUE, getGPL = FALSE )
# Reformat Metadata ----
MetaDF = data.frame(SourceName = GDS$GSE107593_series_matrix.txt.gz$source_name_ch1,
Subject = GDS$GSE107593_series_matrix.txt.gz$`subject:ch1`,
InflammationStatus = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1, 'status: ', ''),
Location = str_replace(GDS$GSE107593_series_matrix.txt.gz$characteristics_ch1.2, 'location: ', ''),
GSM = GDS$GSE107593_series_matrix.txt.gz$geo_accession)
#translate Names to match colnames in Countmatrix
MetaDF$SourceName = str_replace(MetaDF$SourceName, 'Colon_', '')
MetaDF$SourceName = str_replace(MetaDF$SourceName, ' ', '')
#spaces in C
C = str_replace(C, " ", '')
colnames(CountMatrixSup)[10:57] = C
#check if names are the same
all(sort(MetaDF$SourceName) == sort(C)) #yep, all is true
#reorder MetaDF
MetaDF = MetaDF[order(MetaDF$SourceName),]
rownames(MetaDF) = MetaDF$SourceName
# EdgeR ----
CountMatrix = CountMatrixSup[10:57];
rownames(CountMatrix) = CountMatrixSup$Row
#reorder to fit MetaData
CountMatrix = CountMatrix[order(colnames(CountMatrix))]
y <- DGEList(counts = CountMatrix)
keep <- filterByExpr(y) #filter out genes that are not expressed highly enough across all samples
y <- y[keep, , keep.lib.sizes=FALSE] # kicking them out + recalculating library size
y_norm <- calcNormFactors(y, method = 'TMM') #corrects for highly variable genes overshadowing all other effects
cpm <- cpm(y, log = TRUE) #CPM, without normalisation for highly variable genes
tmm <- cpm(y_norm, log = TRUE) #T
dim(tmm)
colnames(tmm)
rownames(tmm)
lenght(unique(rownames(tmm)))
length(unique(rownames(tmm)))
View(CountMatrix)
length(CountMatrixSup$gene_type(keep))
length(CountMatrixSup$gene_type[keep])
mat = as.matrix(tmm)
type = MetaDF$Subject
ha = HeatmapAnnotation(
df = data.frame(subject = type,
inflammation= MetaDF$InflammationStatus,
location = MetaDF$Location),
annotation_height = unit(4, "mm")
)
t1 = Sys.time()
Heatmap(mat, name = "expression", top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)+
Heatmap(CountMatrixSup$gene_type[keep], name = "Type", width = unit(5, "mm"))
t2 = Sys.time()
diff =t2-t1
diff
t1
t2
